In the case WHNF rule we can't do Γ[[Δ]/Δ] for the case alternatives. Instead,
we need to just keep Γ untouched.

The issue became aparent in the delta-var substitution rule.
If we have x:D in the context, and in the case-alternatives we replace it with
x:[D], then we can use x in the case alternative. This seems OK but when we
think about substitution we realize the ability to use this x in the case alternatives allows us to duplicate resources
Counter-example to soundness of subst. if the rule includes the Γ => Γ[[Δ]/Δ] bit:

    let y = close handle
    in case force y of
        _ -> y
  =====>
    let y = close handle
    in case force (close handle) of
        _ -> (close handle)


In contrast, for the CaseWHNF rule, this is fine: the resource isn't consumed because no evaluation happens (and we can only use either the pattern vars or the resources directly)
    let y = close handle
    in case K y of
        _ -> y
  =====>
    let y = close handle
    in case K (close handle) of
        _ -> (close handle)
(Since the usage environments in a way allow us to talk about mutual-exclusivity in the way we choose to use the resources.

By removing the Γ subst. we
* disallow usage of existing delta-vars mentioning resources that were (partially) consumed, where previously we (incorrectly) allowed it
* keep disallowing the usage of the resources directly
* keep requiring the (partially) consumed resources to be fully consumed by use of either the case-binder or the pattern variables.

---

As far as I can tell, we only need the \delta /= 0 restriction for the
var_delta case, and likely to then invoke the delta-subst for alternatives.
Q: Why did we need the delta-subst to be empty for alternatives?... Should have documented it.
