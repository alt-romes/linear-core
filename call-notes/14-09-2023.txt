Introdução
    [x] Nas diferenças de linearidade no Linear Haskell para outros, mencionar um
        ponto grande sobre laziness
Background
    [ ] Remover subsecção dos GADTs, porque não é diretamente relevante para o nosso trabalho
    [x] Em vez de dizer que temos \beta-reduction diferentes, dizer que "a
    forma rigorosa de explicar isto" é com operational semantics e definir beta
    redução
    [x] Adicionar para o call-by-value que o `v` is a value
    [x] No call-by-need adicionar as regras que permitem avaliar o e dentro da expressão (tirar do paper do Phil Wadler?)
    [x] Traduzir o $f(\bot) = \bot$ - função aplicada a coisa que não termina não termina em call by value
    [x] Adicionar paragrafo sobre não dar para perceber a ordem de avaliação e
    se ou não algo vem a ser avaliado, e foreshadowing como isso influencia bastante a linearidade
    [x] Fundir "Evaluation in Haskell" com a anterior, e ser específico com
        [x] Thunks, sharing...
        [x] Nao tenho só lambdas, também construtores e lets
        [x] Constructores pressupoem que os argumentos dos construtores
        [x] Apontar para a prox secção
3
3.1
    [x] Remover secondary goal, nope, é bem primário DONE
    [x] functional pseudo-language -> haskell like language DONE
    [x] mudar eager evaluation para eager semantics e lazy evaluation para lazy semantics DONE
    [x] "this section helps the reader build" -> we now illustrate semantic ... to build intuition...
    [x] still used linearly semantically -> still used semantically linearly DONE
    [x] remover os "sumarios" headers e a frase a introduzir
    [x] recursive lets: terminar items com pontos finais DONE
    [x] Mudar o exemplo do linearity semantically que esta errado para
        [x] Laranja (Apresentar la em cima)
        [x] Mudar a escrita do exemplo
3.2
    [x] Escrever os lets e os cases do Linear Core e tudo o resto...
3.3.
    [x] Metatheory toda basicamente...
    [x] Standard preservation e such
    [x] Varios lemmas de substitutição que caracterizam as minhas variaveis
    [-] Falar das minhas assumptions; Extrair o texto das assumptions, falar do porque e como são usadas e pq é valido, e dizer pq não provamos e q é future work
        (Assumption 3 pode-se demonstrar)
    [x] Optimisations
        [x] Pequeno preamble, programa fonte esta bem tipificado, optimizaçao produz programa que tipifica
        [ ] Fazer listagem das regras antes de as enunciar

Implementação
    [ ] Falar de syntax directed
    [ ] O que não fica nas regras e o que implementamos
    [ ] Falar melhor de split-by-need

Validation da tese
[ ] Coisas que não consigo validar?
[ ] Não conseguimos validar tudo

