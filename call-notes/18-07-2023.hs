{-
Bom dia professor, h√° uma ideia que ainda n√£o consegui formular de coisas
"construtivas" ou "positivas" vs coisas "negativas"

A ideia √© que quando for√ßamos uma coisa positiva no Case, os recursos ainda
est√£o dispon√≠veis no interior do case, porque for√ßar uma computa√ß√£o "positiva"
(e.g. vars, construtores) n√£o consome recursos lineares nem os p√µe no que eu
ando a chamar "ghost resources".  No entanto, for√ßar uma computa√ß√£o "negativa"
(e.g.  application, cases) vai consumir os recursos lineares do scrutinee e
pass√°-los para o dito ghost context.

A qualquer momento, um recurso linear `x` ou `y` apenas pode aparecer out no
/linear context/ ou no /ghost linear context/. Desta forma, um `z` com usage
environment `{x,y}` pode ser usado desde que `{x,y}` estejam ou no linear
context, ou no ghost context. Para al√©m disso, recursos lineares no contexto
linear podem ser usados, mas recursos lineares no ghost context n√£o podem ser
usados - t√™m de ser consumidos atrav√©s do usage environment de outros recursos.

Os usage environments do case binder e dos patterns seriam iguais
para todos os scrutinees, quer estes fossem positivos ou negativos.

O que difere da regra em que o scrutinee √© positivo para a regra em que o
scrutinee √© negativo √© que for√ßar um scrutinee negativo "vai por recursos a serem consumidos" (vai passar os recursos do contexto linear para o ghost context).

Pelo contr√°rio, for√ßar um scrutinee positivo n√£o consome nenhum recurso, por isso os recursos s√£o mantidos.

* Por isso, para positivos, manter os recursos do scrutinee nas alternativas

* Para negativos, mover os recursos do scrutinee para o ghost context

* Em ambos, as linearly bound variables no pattern t√™m um "fragmented usage
  environment" do scrutinee, e o case binder o "usage environment" do scrutinee

* Em ambos, se n√£o houver linearly bound variables, os recursos do scrutinee s√£o consumidos na totalidade (quer desapare√ßam do ghost ou do linear environment)
(aqui ainda me chateia o facto de poder haver implementa√ß√µes que requerem que recursos unrestricted sejam forced para consumir os lineares, mas pronto, falha do programador -- o type system deve consegue garantir que isto acontece bem desde que n√£o se use unsafe coerce)


    Œì;Œî;Œ¥ ‚ä¶ e ‚áë œÉ               Œì;Œî,Œî',z{Œî},a{Œî_f1},b{Œî_f2};Œ¥' ‚ä¶ e'
-------------------------------------------------------------------------
          Œì;Œî,Œî';Œ¥,Œ¥' ‚ä¶ case e of z { K a b -> e' } : œÜ


    Œì;Œî;Œ¥ ‚ä¶ e ‚áì œÉ               Œì;Œî',z{Œî},a{Œî_f1},b{Œî_f2};Œ¥',Œî ‚ä¶ e'
-------------------------------------------------------------------------
          Œì;Œî,Œî';Œ¥,Œ¥' ‚ä¶ case e of z { K a b -> e' } : œÜ


O problema √© que h√° regras que podem misturar ‚áë e ‚áì, tipo a orienta√ß√£o do let depende do body do let...

Exemplos:
-}

-- This is OK since (K1 x y) is positive
f x y = case K1 x y of z
          K1 a b -> (x,y)
          K2 w   -> (x,y)

-- This is NOT OK since (g x y) is negative (eliminates g)
f x y = case g x y of z
          K1 a b -> (x,y)
          K2 w   -> (x,y)

-- E aqui? S√≥ pode ocorrer `x`, o `something y` √© negativo, mas o `x` √© positivo?
-- Se calhar queremos que ocorr√™ncias de vari√°veis mudem sempre de delta bound para linear? (ver prox exemplo)
f y = let x = something y
       in case x of z
          K1 a b -> _
          K2 w   -> _

f x y =
  let x' = something x
      y' = something y
   in case K x' y' of z
   -- O x e o y podem ocorrer aqui, ou s√≥ o x', y'?
        K1 a b -> (x,y)
        K2 w   -> (x,y)
-- Eu diria todos, (o x e o y n√£o s√£o consumidos)
-- Mas no caso da vari√°vel isso n√£o funciona porque ao for√ßar a vari√°vel
-- estamos 100% a passar de delta bound para linear bound, porque passamos a
-- ter de consumir o resultado da suspended computation, e os recursos
-- originais deixam de estar dispon√≠veis de todo.
f x y =
  let x' = something x
   in case x' of z
   -- Aqui o x n√£o pode ocorrer de certeza, mas o x' pode.
   -- Como conciliar?
      K1 a b -> (x,y)
      K2 w   -> (x,y)

{-
Conversa com Prof. Toninho:

sadmafioso ‚Äî Today at 13:02
tu estas a usar a seta para o positivo e o negativo?

romes ‚Äî Today at 13:11
Sim, exato, mas √© um pouco estranho

sadmafioso ‚Äî Today at 13:12
√© um bocado, pq est√°s a caracterizar expressoes e nao tipos
isso geralmente nao costuma ser flexivel o suficiente
haveria uma forma d usar os tipos para guiar a coisa?
ou √© irrelevante?

romes ‚Äî Today at 13:16
hm, seria interessante

sadmafioso ‚Äî Today at 13:17
f x y =
  let x' = something x
      y' = something y
   in case K x' y' of z
   -- O x e o y podem ocorrer aqui, ou s√≥ o x', y'?
        K1 a b -> (x,y)
        K2 w   -> (x,y)

aqui

romes ‚Äî Today at 13:17
n√£o tenho a certeza

sadmafioso ‚Äî Today at 13:18
tu dizes que o x/y pode ocorrer pq o case √© de um construtor e portanto o x' e o y' nunca sao forcados
√© isso?

romes ‚Äî Today at 13:18
sim

sadmafioso ‚Äî Today at 13:18
no fundo o que estas a distinguir sempre no case

romes ‚Äî Today at 13:18
√© que n√£o h√° nenhuma computa√ß√£o efetivamente

sadmafioso ‚Äî Today at 13:18
**√© entre o caso em que ja esta em WHNF ou nao nao √©?**

romes ‚Äî Today at 13:18
AHA! Sim, exatamente exatamente
Perfeito, √© isso mesmo
no caso em que ainda n√£o est√° em WHNF acontece computa√ß√£o
e j√° n√£o podemos usar nenhum recurso

sadmafioso ‚Äî Today at 13:19
e portanto tens de tratar diferente
sim

romes ‚Äî Today at 13:19
sim.
mas no caso em que est√° em WHNF n√£o consumimos os recursos.
Mas a vari√°vel ainda √© especial, porque n√£o podemos assumir que est√° em whnf ou
n√£o, ou melhor, ao passar de bound variable para whnf passa de delta bound para
linear bound
ser√° poss√≠vel fazer track de whnformedness ao n√≠vel dos tipos?
e h√° uma conex√£o bonita entre WHNF e linearity ?

sadmafioso ‚Äî Today at 13:22
nao
mas teres um caso para o case
(ehhe)
em que ves se esta em WHNF ou nao
ja n √© completamente adhoc, parece me

romes ‚Äî Today at 13:23
pois n√£o! mas como √© que o case distingue isso?

sadmafioso ‚Äî Today at 13:23
a conexao parece-me que estas tu a descobri-la/inventa-la aqui no contexto de lazyness üòõ

romes ‚Äî Today at 13:23
sim, sinto tanbem muito que √© isso que est√° a acontecer

sadmafioso ‚Äî Today at 13:24
como assim?
√© possivel determinar se uma expressao arbitraria esta em WHNF ou nao

romes ‚Äî Today at 13:24
como √© que ao tipificar uma express√£o eu sei que ela est√° ou n√£o em whnf

sadmafioso ‚Äî Today at 13:24
√© uma propriedade decidivel üòõ

romes ‚Äî Today at 13:24
ahh boa, pois, deve ser a hist√≥ria que eu estava a inventar do positivo e negativo
a s√©rio?!

sadmafioso ‚Äî Today at 13:24
claro q sim

romes ‚Äî Today at 13:24
isso √© um resultado popular?
espetacular

sadmafioso ‚Äî Today at 13:25
acho eu

romes ‚Äî Today at 13:25
tem a ver com determinar pode reduzir ou n√£o

sadmafioso ‚Äî Today at 13:25
deixa me pensar se n estou a dizer asneira

romes ‚Äî Today at 13:25
se calhar a defini√ß√£o de Valor

sadmafioso ‚Äî Today at 13:26
intuitivamente parece me decidivel pq e uma propriedade sintactica
relativamente simples
nao estamos a falar de meter uma expressao em WHNF
√© testar se

romes ‚Äî Today at 13:26
excelente
s√≥ falta 1 pe√ßa, as vari√°veis
porque o case geral que eu defini em cima para WHNF passa os recursos do scrutinee para o body
mas se tivermos
f x = let y = something x
       in case y of
           K a -> y
 
o x definitivamente /n√£o/ pode ocorrer no corpo do case, mas a regra geral diz que pode, porque os recursos de y s√£o D=x
e y est√° em WHNF ?
OMG, se calhar √© exatamente isso
uma vari√°vel √© a unica coisa para a qual n√£o sabemos se est√° em WHNF ou n√£o
por isso temos sempre de avaliar para WHNF antes de fazer pattern match
e √© a√≠ mesmo que aplicamos aquela regra para avaliar a v√°riavel, que passa de Delta para Linear

sadmafioso ‚Äî Today at 13:33
faz me algum sentido

romes ‚Äî Today at 13:40
Depois temos de discutir melhor, j√° come√ßam a cristalizar-se algumas ideias, mas ainda √© preciso realmente junt√°-las todas num sistema simples e conciso
Mas estou entusiasmado!

sadmafioso ‚Äî Today at 13:40
teres uma premissa numa regra que "testa" se a expressao do case esta em WHNF ou nao
parece me razoavel
ou algum tweak disso

romes ‚Äî Today at 13:42
Sim, e conjugamos isso com o /ghost linear context/, com os /fragmented usage
environments/ e com a regra que avalia a vari√°vel e muda coisas delta-bound
para linear-bound.

-}

{-
On the /ghost linear context/, /fragmented usage environments/,
evaluating variables to WHNF, and the case rule that branches on whether the
scrutinee is in WHNF:

* Case expressions are difficult to type taking into considerations all the nuances of linearity and evaluation

* They're interesting because its where evaluation vs consumption of linear resources encounter each other

* Forcing an expression to WHNF in the case scrutinee won't really consume all the resources used in the scrutinee
  * Only when the expression is evaluated to NF are all resources used in the expression consumed
    * Rather, when the expression is evaluated to NF or all the linear fields of the WHNF are evaluated to NF
  * Otherwise, evaluation to WHNF will consume /some unknown part/ of the resources
    * We can no longer use the resources in the expression
    * But need to consume the the /remaining unknown part/ of the resources
      * This means using the case binder, which binds to the result of the
        computation that needs to be evaluated in order to consume
      * Or using the linearly-bound variables, which will force the remaining
    * 


Intrinsic connection between evaluating a resource and consuming a resource:
* A resource is only consumed when it is fully evaluated (to NF)

  * Or is it when all linear components are fully evaluated (to NF)?

  * Since if we don't need to necessarily consume the unrestricted resources
    for all the linear resources to have been consumed

* What about unlifted types? (like pattern matching on RealWorld#)?
  * Really, despite (# _, _ #) binding two linear variables, they're already
  fully evaluated, so we don't need to consume them now? Yes, that sounds
  right, but wouldn't that mean we could duplicate RealWorld# inside of the
  case alternative???

* Why must unlifted variables be used exactly once? If we're talking about
  linear unlifted things, it might be that really want to track linearity of
  these unlifted resources, which is uncommon, but might be desired for things
  like RealWorld#?

-}

