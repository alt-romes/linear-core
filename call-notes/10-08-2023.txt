Note [exprIsHNF]             See also Note [exprIsCheap and exprIsHNF]
~~~~~~~~~~~~~~~~
| exprIsHNF returns true for expressions that are certainly /already/
evaluated to /head/ normal form.  This is used to decide whether it's ok
to change:

> case x of _ -> e

   into:

> e

and to decide whether it's safe to discard a 'seq'.

So, it does /not/ treat variables as evaluated, unless they say they are.
However, it /does/ treat partial applications and constructor applications
as values, even if their arguments are non-trivial, provided the argument
type is lifted. For example, both of these are values:

> (:) (f x) (map f xs)
> map (...redex...)

because 'seq' on such things completes immediately.

For unlifted argument types, we have to be careful:

> C (f x :: Int#)

Suppose @f x@ diverges; then @C (f x)@ is not a value.
We check for this using needsCaseBinding below

