Romes.fmt -- lhs2tex format in the style of https://github.com/goldfirere/thesis/blob/master/tex/rae.fmt


Declarativamente posso fazer isto sem pensar na construção de usage environments.
Se tivesse os usage environments, como faria isto?
* Usar os usage environments para tipificar
* Argumentar que isto faz sentido


This is the tracking ticket for the work I'm doing for my Master's dissertation on typechecking linearity in Core.

I'm currently finishing the soundness proof for the linear type system of a Core-like language, that annotates let and letrec bound variables as well as case binders with *usage environments*, as seen in the [Minicore document](https://gitlab.haskell.org/ghc/ghc/-/wikis/uploads/355cd9a03291a852a518b0cb42f960b4/minicore.pdf).

I haven't (yet?) addressed GADTs and multiplicity coercions.

The [work in progress dissertation document](https://github.com/alt-romes/linear-core-lint/blob/master/report.pdf) motivates this issue and discusses the background, what I intend to do, and a preliminary solution. Note that Chapter 3/4 are still much incomplete.

/relate #19517 #18756 #20058 #19165 #18768 #18694 #20000
/label ~LinearTypes ~"core lint" ~"T::design document"

----

Complete soundness proof
- [ ] Type preservation: case K e of K e -> e’
- [ ] Type preservation: case K e of _ -> e’
- [ ] Type preservation: case e of … -> case e’ of …
- [ ] Progress: case WHNF
- [ ] Progress: case Not WHNF
- [ ] Linear subst: Var1
- [ ] Linear subst: Var delta
- [ ] Linear subst: Split
- [ ] Linear subst: Case Not WHNF on congruence
- [ ] Linear subst: Alt0 source ToDos
- [ ] Unr. subst: Split
- [ ] Unr. subst: Case WHNF
- [ ] Unr. subst: Case Not WHNF
- [ ] Unr. subst: AltN
- [ ] Unr. subst: Alt0
- [ ] Unr. subst: Alt_
- [ ] Delta subst: Split
- [ ] Delta subst: Case WHNF
- [ ] Delta subst: Case Not WHNF
- [ ] Delta subst: AltN
- [ ] Delta subst: Alt0
- [ ] Delta subst: Alt_
- [ ] Check whether we need the delta/=emptyset hypothesis — check type preservation that invokes delta subst. We do need it on the delta-subst for the alt-judgment, but perhaps don’t need it on the delta-subst for the main judg.
- [ ] Check whether cases need to account for the non-existence of delta vars (probably only elimination of lambda on delta subst), given we discuss whether the linear context goes to the left or to the right, not the variable

---
