@misc{jones1999haskell,
  title={Haskell 98},
  author={Jones, Simon Peyton and Hughes, John and Augustsson, Lennart and Barton, Dave and Boutel, Brian and Burton, Warren and Fasel, Joseph and Hammond, Kevin and Hinze, Ralf and Hudak, Paul and others},
  year={1999},
  publisher={Citeseer}
}


@article{marlow2010haskell,
  title={Haskell 2010 language report},
  author={Marlow, Simon and others},
  year={2010}
}

@article{linearhaskell,
  author    = {Jean{-}Philippe Bernardy and
               Mathieu Boespflug and
               Ryan R. Newton and
               Simon Peyton Jones and
               Arnaud Spiwack},
  title     = {Linear Haskell: practical linearity in a higher-order polymorphic
               language},
  journal   = {CoRR},
  volume    = {abs/1710.09756},
  year      = {2017},
  url       = {http://arxiv.org/abs/1710.09756},
  eprinttype = {arXiv},
  eprint    = {1710.09756},
  timestamp = {Mon, 13 Aug 2018 16:47:41 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1710-09756.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{linearbase,
  title = {{linear-base}},
  author = {{Tweag}},
  howpublished = {\url{https://github.com/tweag/linear-base}},
  note = {Accessed: 2022-11-25}
}

@article{10.1145/1160074.1159811,
author = {Peyton Jones, Simon and Vytiniotis, Dimitrios and Weirich, Stephanie and Washburn, Geoffrey},
title = {Simple Unification-Based Type Inference for GADTs},
year = {2006},
issue_date = {September 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/1160074.1159811},
doi = {10.1145/1160074.1159811},
abstract = {Generalized algebraic data types (GADTs), sometimes known as "guarded recursive data types" or "first-class phantom types", are a simple but powerful generalization of the data types of Haskell and ML. Recent works have given compelling examples of the utility of GADTs, although type inference is known to be difficult. Our contribution is to show how to exploit programmer-supplied type annotations to make the type inference task almost embarrassingly easy. Our main technical innovation is wobbly types, which express in a declarative way the uncertainty caused by the incremental nature of typical type-inference algorithms.},
journal = {SIGPLAN Not.},
month = {sep},
pages = {50–61},
numpages = {12},
keywords = {type inference, generalized algebraic data types}
}

@inproceedings{10.1145/1159803.1159811,
author = {Peyton Jones, Simon and Vytiniotis, Dimitrios and Weirich, Stephanie and Washburn, Geoffrey},
title = {Simple Unification-Based Type Inference for GADTs},
year = {2006},
isbn = {1595933093},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1159803.1159811},
doi = {10.1145/1159803.1159811},
abstract = {Generalized algebraic data types (GADTs), sometimes known as "guarded recursive data types" or "first-class phantom types", are a simple but powerful generalization of the data types of Haskell and ML. Recent works have given compelling examples of the utility of GADTs, although type inference is known to be difficult. Our contribution is to show how to exploit programmer-supplied type annotations to make the type inference task almost embarrassingly easy. Our main technical innovation is wobbly types, which express in a declarative way the uncertainty caused by the incremental nature of typical type-inference algorithms.},
booktitle = {Proceedings of the Eleventh ACM SIGPLAN International Conference on Functional Programming},
pages = {50–61},
numpages = {12},
keywords = {type inference, generalized algebraic data types},
location = {Portland, Oregon, USA},
series = {ICFP '06}
}

@article{10.1145/3408971,
author = {Serrano, Alejandro and Hage, Jurriaan and Peyton Jones, Simon and Vytiniotis, Dimitrios},
title = {A Quick Look at Impredicativity},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408971},
doi = {10.1145/3408971},
abstract = {Type inference for parametric polymorphism is wildly successful, but has always suffered from an embarrassing flaw: polymorphic types are themselves not first class. We present Quick Look, a practical, implemented, and deployable design for impredicative type inference. To demonstrate our claims, we have modified GHC, a production-quality Haskell compiler, to support impredicativity. The changes required are modest, localised, and are fully compatible with GHC's myriad other type system extensions.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {89},
numpages = {29},
keywords = {Type systems, constraint-based inference, impredicative polymorphism}
}
